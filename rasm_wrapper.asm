; This is a z80asm assembly language file. It wraps the the rasm-generated code
; (i.e. the binaries of the music and player) and assembles into a z88dk object
; which can be linked into the final C program.
; It pulls in the zsdcc-formatted symbols as generated by rasm so it knows where
; the initialisation, player-start and player-stop functions are. C-wrapper
; functions are provided so they can be called from C. (The upper case rasm
; symbols could be exported to the C to save a couple of bytes.)
; The ORG must be the same as the one rasm used to produce the blob.

org 0xC000

; Load rasm-generated symbols
;
	INCLUDE "rasmoutput.sym"

; Song data and player, as generated by rasm
;
public _hocuspocus
_hocuspocus:			
	BINARY "at2_wrapper.o"


; Initialisation, called from C, jumps to the player's init code
; Trashes BC.
;
public _ply_akg_init
_ply_akg_init:
	pop bc			; return address
	pop hl			; song data in HL
	pop af			; sub song in A
	push bc			; restore return address
	jp PLY_AKG_INIT		; jump to player's initialisation


; Player start, called from C, jumps to the player's play routine
;
public _ply_akg_play
_ply_akg_play:
	jp PLY_AKG_PLAY


; Player stop, called from C, jumps to the player's stop routine
;
public _ply_akg_stop
_ply_akg_stop:
	jp PLY_AKG_STOP
